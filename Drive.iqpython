{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nFlywheel = Motor(Ports.PORT4, False)\nTensioner = Motor(Ports.PORT3, False)\ncontroller = Controller()\nChoochoo_motor_a = Motor(Ports.PORT6, False)\nChoochoo_motor_b = Motor(Ports.PORT7, True)\nChoochoo = MotorGroup(Choochoo_motor_a, Choochoo_motor_b)\nLeft = Motor(Ports.PORT2, True)\nRight = Motor(Ports.PORT1, False)\nPneumatics = Pneumatic(Ports.PORT8)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nGoal = 0\nDirection = 0\nExtra_Tension = 0\nDt = 0\nBalls = 1\nLow = 0.2\nHigh = 5\nIs_Extended = False\n\ndef main():\n    global Balls, Goal, Direction, Extra_Tension, vexcode_brain_precision, vexcode_console_precision\n    tension = High\n    Direction = FORWARD\n        \n    # This keeps the choochoo in position at the start so that you don't have to us the L up button.\n    Choochoo.spin_for(FORWARD,0.1,DEGREES,wait=False)\n    Pneumatics.pump_on()\n\n    # Waits for the E up button before starting the code. Idk why I did this because the refs obviously let you start your code before the match.\n    while not controller.buttonEUp.pressing():\n        pass\n\n    Flywheel.set_velocity(100, PERCENT)\n    Flywheel.spin(FORWARD)\n\n    while True:\n        # Sets the tension for the selected goal\n        if (Goal == \"High\"):\n            tension = High + Extra_Tension\n        else:\n            tension = Low + Extra_Tension\n        Tensioner.set_velocity((Tensioner.position(TURNS) - tension) * 300, PERCENT) # Scales velocity linearly, if 0.3 off position it will be 90% ect.\n        Tensioner.spin_to_position(tension, TURNS, wait=False)\n\n        # Controller\n        forwardSpeed = controller.axisA.position()\n        # Quadratic function for precise steering.\n        turnSpeed = math.copysign(pow(controller.axisC.position(), 2) / (200 - abs(forwardSpeed * 1.5)), controller.axisC.position())\n        if (Is_Extended and forwardSpeed > 50): # Caps the speed when the intake is up to make sure that the bot doesn't break the ball splitter.\n            forwardSpeed = 50\n\n        Left.spin(FORWARD, forwardSpeed + turnSpeed, PERCENT)\n        Right.spin(FORWARD, forwardSpeed - turnSpeed, PERCENT)\n        \n        wait(50,MSEC)\n\ndef shoot():\n    global Balls\n    Choochoo.spin_for(FORWARD, 1.6666, TURNS)\n    Balls -= 1\n\n# Used in case the catapult accidentaly goes too far, or at the end of the match for a buzzer beater.\ndef adjust_choochoo():\n    Choochoo.spin_for(FORWARD, 0.15, TURNS)\n\ndef start_intake():\n    global Is_Extended, Direction\n    \n    # If the flywheel is stopped, it will just turn on instead of switching the pneumatics.\n    if (Direction == FORWARD):\n        if (Is_Extended):\n            Pneumatics.extend(CYLINDER1)\n            Pneumatics.extend(CYLINDER2)\n        else:\n            Pneumatics.retract(CYLINDER1)\n            Pneumatics.retract(CYLINDER2)\n        Is_Extended = not Is_Extended\n    Pneumatics.pump_on()\n\n    Flywheel.set_velocity(100, PERCENT)\n    Flywheel.spin(FORWARD)\n\ndef reverse_intake():\n    # The intake will stop after reversing.\n    while controller.buttonRDown.pressing():\n        Flywheel.set_velocity(100, PERCENT)\n        Flywheel.spin(REVERSE)\n        Direction = REVERSE\n    Flywheel.set_velocity(0, PERCENT)\n    Direction = 0\n\ndef increase_tension():\n    global Extra_Tension\n    Extra_Tension += 0.1\n\ndef decrease_tension():\n    global Extra_Tension\n    Extra_Tension += -0.1\n\ndef set_high_goal():\n    global Goal\n    Goal = \"High\"\n\ndef set_low_goal():\n    global Goal\n    Goal = \"Low\"\n\n# Resets the tension to 0 to preserve the motor.\ndef reset():\n    global Extra_Tension, Goal, High\n    Extra_Tension = -1 * High\n    Goal = \"High\"\n\n# system event handlers\ncontroller.buttonLUp.pressed(adjust_choochoo)\ncontroller.buttonRUp.pressed(start_intake)\ncontroller.buttonLDown.pressed(shoot)\ncontroller.buttonRDown.pressed(reverse_intake)\ncontroller.buttonEUp.pressed(increase_tension)\ncontroller.buttonFUp.pressed(set_high_goal)\ncontroller.buttonEDown.pressed(decrease_tension)\ncontroller.buttonFDown.pressed(set_low_goal)\ncontroller.buttonR3.pressed(reset)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nmain()","textLanguage":"python","robotConfig":[{"port":[4],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[6,7],"name":"Choochoo","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[2],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"Pneumatics","customName":true,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"cylinder1","cylinder2":"cylinder2","cylinder1_reversed":"false","cylinder2_reversed":"false","cylinder3":"","cylinder4":""},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}
