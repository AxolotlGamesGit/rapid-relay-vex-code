{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nChoochoo = Motor(Ports.PORT6, False)\nFlywheel = Motor(Ports.PORT4, False)\nTensioner = Motor(Ports.PORT3, False)\ncontroller = Controller()\nLeftDistance = Distance(Ports.PORT7)\nRightDistance = Distance(Ports.PORT11)\nCataDistance = Distance(Ports.PORT5)\nLeft = Motor(Ports.PORT2, False)\nRight = Motor(Ports.PORT1, True)\nBackDistance = Distance(Ports.PORT12)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nGoals = 0\nLow = 2.7\nHigh = 5\nTension = 0\nDirection = FORWARD\nBalls = 0\nIsReady = True\nBallDistance = LeftDistance.object_distance(MM) + RightDistance.object_distance(MM)\nBallDistanceGoal = BallDistance/2 - 170\nChoochoo.spin_for(FORWARD,0.1,DEGREES,wait=False)\n\ndef frame():\n    global Goals, Low, High, Tension, Direction, Balls, IsReady, BallDistance, BallDistanceGoal\n    Tensioner.set_velocity(abs(Tension-Tensioner.position(TURNS))*300, PERCENT)\n    Tensioner.spin_to_position(Tension, TURNS, wait=False)\n    \n    # Makes the screen green if there is a ball in the middle of the flywheel\n    BallDistance = LeftDistance.object_distance(MM)+RightDistance.object_distance(MM)\n    if (BallDistance < BallDistanceGoal):\n        brain.screen.set_fill_color(Color.GREEN)\n    else:\n        brain.screen.set_fill_color(Color.BLACK)\n    brain.screen.draw_rectangle(100,0,70,70)\n        \n    # 0 balls means none in the cata, 1 means 1 in the cata and still picking up a\n    # second ball. 2 means 2 balls, with 1 in the middle of the flywheel.\n    if (CataDistance.object_distance(MM)>100):\n        Balls = 0\n    elif (CataDistance.object_distance(MM)<100 and BallDistance > BallDistanceGoal):\n        Balls = 1\n    else:\n        Balls = 2\n        if (not controller.buttonFUp.pressing()):\n            Flywheel.set_velocity((Left.velocity(RPM)+Right.velocity(RPM))/4, RPM)\n    \n    IsReady = (Choochoo.position(TURNS) - 0.1) % 2.5 > 2.3\n    \n    Flywheel.spin(Direction)\n    \n    wait(20, MSEC)\n\ndef speed(left, right):\n    Left.set_velocity(left,PERCENT)\n    Right.set_velocity(right,PERCENT)\n    Left.spin(FORWARD)\n    Right.spin(FORWARD)\n\ndef drive_to_distance(driveDistance):\n    if (brain.timer.time(SECONDS) < 60):\n        while BackDistance.object_distance(MM) < driveDistance:\n            speed(driveDistance - BackDistance.object_distance(MM), driveDistance - BackDistance.object_distance(MM))\n            frame()\n\ndef turn_to_heading(headingGoal):\n    if (brain.timer.time(SECONDS) < 60):\n        while abs(brain_inertial.heading(DEGREES) - headingGoal) < 5:\n            speed(3 * (brain_inertial.heading(DEGREES) - headingGoal), -3 * (brain_inertial.heading(DEGREES) - headingGoal))\n            frame()\n\ndef back_up():\n    while BackDistance.object_distance(MM) > 10:\n        speed(-100, -100)\n    brain_inertial.set_heading(180,DEGREES)\n\n\ndef shoot_percent(waitPercent):\n    global IsReady, Goals\n    while not IsReady:\n        frame()\n    if brain.timer.time(SECONDS) < 56:\n        Choochoo.spin_for(FORWARD, 2.5, TURNS, wait=False)\n        Goals += 1\n        while ((Choochoo.position(TURNS) - 0.1) % 2.5) / 0.025 < waitPercent:\n            frame()\n    else:\n        if brain.timer.time(SECONDS) < 58.5:\n            Goals += 1\n        while brain.timer.time(SECONDS) < 59:\n            Choochoo.set_velocity(100,PERCENT)\n\ndef when_started1():\n    global Tension, High, Low, IsReady\n    brain_inertial.calibrate()\n    while not brain.buttonLeft.pressing():\n        pass\n    \n    Tension = High\n    brain_inertial.set_heading(180,DEGREES)\n\n    drive_to_distance(800)\n    turn_to_heading(0)\n    back_up()\n    shoot_percent(30)\n\n    Tension = 6\n    speed(50,50)\n    shoot_percent(20)\n\n    turn_to_heading(90)\n    drive_to_distance(500)\n    turn_to_heading(0)\n\n    Tension = High\n    back_up()\n    shoot_percent(30)\n\n    Tension = Low\n    shoot_percent(20)\n\n    while (brain.timer.time(SECONDS) < 60):\n        Tension = 6\n\n        drive_to_distance(400)\n        drive_to_distance(200)\n        shoot_percent(100)\n        shoot_percent(100)\n\n\n\n\n\n\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[6],"name":"Choochoo","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[7],"name":"LeftDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[11],"name":"RightDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"CataDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[2],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[1],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}},{"port":[12],"name":"BackDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{}}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}
