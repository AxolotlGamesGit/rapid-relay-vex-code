{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT2, 1.0, False)\nright_drive_smart = Motor(Ports.PORT1, 1.0, True)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\nChoochoo = Motor(Ports.PORT6, False)\nFlywheel = Motor(Ports.PORT4, False)\nTensioner = Motor(Ports.PORT3, False)\ncontroller = Controller()\nLeftDistance = Distance(Ports.PORT7)\nRightDistance = Distance(Ports.PORT11)\nCataDistance = Distance(Ports.PORT5)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA + axisC\n            # right = axisA - axisC\n            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()\n            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nGoal = 0\nDirection = 0\nExtraTension = 0\n\ndef when_started1():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Low = 2.7\n    High = 5\n    Tension = 5\n    Direction = FORWARD\n    Balls = 0\n    BallDistance = LeftDistance.object_distance(MM) + RightDistance.object_distance(MM)\n    BallDistanceGoal = BallDistance/2 - 170\n    Choochoo.spin_for(FORWARD,0.1,DEGREES,wait=False)\n    while not controller.buttonEUp.pressing():\n        pass\n    while True:\n        # Sets the tension for the selected goal\n        if (Goal == \"High\"):\n            Tension = High + ExtraTension\n        else:\n            Tension = Low + ExtraTension\n        Tensioner.set_velocity(abs(Tension-Tensioner.position(TURNS))*300, PERCENT)\n        Tensioner.spin_to_position(Tension, TURNS, wait=False)\n    \n        # Makes the screen green if there is a ball in the middle of the flywheel\n        BallDistance = LeftDistance.object_distance(MM)+RightDistance.object_distance(MM)\n        if (BallDistance < BallDistanceGoal):\n            brain.screen.set_fill_color(Color.GREEN)\n        else:\n            brain.screen.set_fill_color(Color.BLACK)\n        brain.screen.draw_rectangle(100,0,70,70)\n    \n        # Makes the screen green if there is a ball in the middle of the flywheel\n        BallDistance = LeftDistance.object_distance(MM)+RightDistance.object_distance(MM)\n        if (Goal == \"High\"):\n            brain.screen.set_fill_color(Color.GREEN)\n        else:\n            brain.screen.set_fill_color(Color.WHITE)\n        brain.screen.draw_rectangle(0,0,70,70)\n    \n        # 0 balls means none in the cata, 1 means 1 in the cata and still picking up a\n        # second ball. 2 means 2 balls, with 1 in the middle of the flywheel.\n        if (CataDistance.object_distance(MM)>100):\n            Balls = 0\n        elif (CataDistance.object_distance(MM)<100 and BallDistance > BallDistanceGoal):\n            Balls = 1\n        else:\n            Balls = 2\n            if (not controller.buttonFUp.pressing()):\n                Flywheel.set_velocity(drivetrain.velocity(RPM)/2, RPM)\n        \n        Flywheel.spin(Direction)\n    \n        wait(20, MSEC)\n\ndef onevent_controllerbuttonLUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Choochoo.spin_for(FORWARD, 0.3, TURNS)\n\ndef onevent_controllerbuttonRUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Flywheel.set_velocity(100, PERCENT)\n    Direction = FORWARD\n\ndef onevent_controllerbuttonLDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Choochoo.spin_for(FORWARD, 2.5, TURNS)\n\ndef onevent_controllerbuttonRDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    while not controller.buttonRDown.pressing():\n        Flywheel.set_velocity(100, PERCENT)\n        Direction = REVERSE\n    Flywheel.set_velocity(0, PERCENT)\n\ndef onevent_controllerbuttonEUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    ExtraTension += 0.1\n\ndef onevent_controllerbuttonFUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n\n\ndef onevent_controllerbuttonEDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    ExtraTension += -0.1\n\ndef onevent_controllerbuttonFDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    if (Goal == \"High\"):\n        Goal = \"Low\"\n    else:\n        Goal = \"High\"\n\n# system event handlers\ncontroller.buttonLUp.pressed(onevent_controllerbuttonLUp_pressed_0)\ncontroller.buttonRUp.pressed(onevent_controllerbuttonRUp_pressed_0)\ncontroller.buttonLDown.pressed(onevent_controllerbuttonLDown_pressed_0)\ncontroller.buttonRDown.pressed(onevent_controllerbuttonRDown_pressed_0)\ncontroller.buttonEUp.pressed(onevent_controllerbuttonEUp_pressed_0)\ncontroller.buttonFUp.pressed(onevent_controllerbuttonFUp_pressed_0)\ncontroller.buttonEDown.pressed(onevent_controllerbuttonEDown_pressed_0)\ncontroller.buttonFDown.pressed(onevent_controllerbuttonFDown_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[2,1,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[6],"name":"Choochoo","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[7],"name":"LeftDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[11],"name":"RightDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"CataDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}