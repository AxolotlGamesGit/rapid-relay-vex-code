{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nChoochoo = Motor(Ports.PORT6, False)\nFlywheel = Motor(Ports.PORT4, False)\nTensioner = Motor(Ports.PORT3, False)\ncontroller = Controller()\nLeftDistance = Distance(Ports.PORT7)\nRightDistance = Distance(Ports.PORT11)\nCataDistance = Distance(Ports.PORT5)\nLeft = Motor(Ports.PORT1, False)\nRight = Motor(Ports.PORT2, False)\nBackDistance = Distance(Ports.PORT12)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\nimport threading\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nGoal = 0\nDirection = 0\nExtraTension = 0\nLow = 2.7\nHigh = 5\nTension = 5\nDirection = FORWARD\nBalls = 0\nBallDistance = LeftDistance.object_distance(MM) + RightDistance.object_distance(MM)\nBallDistanceGoal = BallDistance/2 - 170\nChoochoo.spin_for(FORWARD,0.1,DEGREES,wait=False)\n\ndef loop():\n    while True:\n        # Sets the tension for the selected goal\n        if (Goal == \"High\"):\n            Tension = High + ExtraTension\n        else:\n            Tension = Low + ExtraTension\n        Tensioner.set_velocity(abs(Tension-Tensioner.position(TURNS))*300, PERCENT)\n        Tensioner.spin_to_position(Tension, TURNS, wait=False)\n    \n        # Makes the screen green if there is a ball in the middle of the flywheel\n        BallDistance = LeftDistance.object_distance(MM)+RightDistance.object_distance(MM)\n        if (BallDistance < BallDistanceGoal):\n            brain.screen.set_fill_color(Color.GREEN)\n        else:\n            brain.screen.set_fill_color(Color.BLACK)\n        brain.screen.draw_rectangle(100,0,70,70)\n    \n        # Makes the screen green if there is a ball in the middle of the flywheel\n        BallDistance = LeftDistance.object_distance(MM)+RightDistance.object_distance(MM)\n        if (Goal == \"High\"):\n            brain.screen.set_fill_color(Color.GREEN)\n        else:\n            brain.screen.set_fill_color(Color.WHITE)\n        brain.screen.draw_rectangle(0,0,70,70)\n    \n        # 0 balls means none in the cata, 1 means 1 in the cata and still picking up a\n        # second ball. 2 means 2 balls, with 1 in the middle of the flywheel.\n        if (CataDistance.object_distance(MM)>100):\n            Balls = 0\n        elif (CataDistance.object_distance(MM)<100 and BallDistance > BallDistanceGoal):\n            Balls = 1\n        else:\n            Balls = 2\n            if (not controller.buttonFUp.pressing()):\n                Flywheel.set_velocity((Left.velocity(RPM)+Right.velocity(RPM))/4, RPM)\n                \n        \n        Flywheel.spin(Direction)\n    \n        wait(20, MSEC)\n\ndef speed(left, right):\n    Left.set_velocity(left,PERCENT)\n    Right.set_velocity(right,PERCENT)\n\ndef when_started1():\n    while not brain.buttonLeft.pressing():\n        pass\n    \n    mainLoop = threading.Thread(target = loop)\n    mainLoop.start()\n\n    while BackDistance.object_distance(MM) < 1300:\n        speed(BackDistance.object_distance(MM) - 1280, BackDistance.object_distance(MM) - 1280)\n    while brain_inertial.orientation(YAW,DEGREES) < 180:\n        speed(4 * (brain_inertial.orientation(YAW,DEGREES) - 170), -4 * (brain_inertial.orientation(YAW,DEGREES) - 170))\n    while BackDistance.object_distance(MM) > 20:\n        speed(-1 * BackDistance.object_distance(MM), -1 * BackDistance.object_distance(MM))\n    \n\ndef onevent_controllerbuttonLUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Choochoo.spin_for(FORWARD, 0.3, TURNS)\n\ndef onevent_controllerbuttonRUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Flywheel.set_velocity(100, PERCENT)\n    Direction = FORWARD\n\ndef onevent_controllerbuttonLDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    Choochoo.spin_for(FORWARD, 2.5, TURNS)\n\ndef onevent_controllerbuttonRDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    while not controller.buttonRDown.pressing():\n        Flywheel.set_velocity(100, PERCENT)\n        Direction = REVERSE\n    Flywheel.set_velocity(0, PERCENT)\n\ndef onevent_controllerbuttonEUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    ExtraTension += 0.1\n\ndef onevent_controllerbuttonFUp_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n\n\ndef onevent_controllerbuttonEDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    ExtraTension += -0.1\n\ndef onevent_controllerbuttonFDown_pressed_0():\n    global Goal, Direction, ExtraTension, vexcode_brain_precision, vexcode_console_precision\n    if (Goal == \"High\"):\n        Goal = \"Low\"\n    else:\n        Goal = \"High\"\n\n# system event handlers\ncontroller.buttonLUp.pressed(onevent_controllerbuttonLUp_pressed_0)\ncontroller.buttonRUp.pressed(onevent_controllerbuttonRUp_pressed_0)\ncontroller.buttonLDown.pressed(onevent_controllerbuttonLDown_pressed_0)\ncontroller.buttonRDown.pressed(onevent_controllerbuttonRDown_pressed_0)\ncontroller.buttonEUp.pressed(onevent_controllerbuttonEUp_pressed_0)\ncontroller.buttonFUp.pressed(onevent_controllerbuttonFUp_pressed_0)\ncontroller.buttonEDown.pressed(onevent_controllerbuttonEDown_pressed_0)\ncontroller.buttonFDown.pressed(onevent_controllerbuttonFDown_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[6],"name":"Choochoo","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[7],"name":"LeftDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[11],"name":"RightDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"CataDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[2],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[12],"name":"BackDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{}}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}
